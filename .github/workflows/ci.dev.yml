name: uitest

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'vsix release tag. e.g. stable, rc or leave it empty to use latest daily release'
        required: false
      test-case:
        description: 'test case, e.g. ["localdebug-tab", "localdebug-bot"], Set empty to run all predefined cases'
        required: false
      os:
        default: '["ubuntu-latest"]'
        description: 'os, e.g. ["macos-latest", "self-hosted", "ubuntu-latest", "windows-latest"]'
        required: false
      node-version:
        default: '[16]'
        description: "node version, e.g. [16]"
        required: false
      enable-email:
        description: "email notification"
        required: false
      ab-testing-group:
        description: "ab testing group, should be a number. e.g. 1"
        required: false
  schedule:
    - cron: "0 2 * * *"
    - cron: "0 5,9 * * *"

  push:
    branches:
      - main
      - dev
      - rc
    paths:
      - "**.*"

jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Check if scheduled test
        id: check-if-scheduled-test
        run: |
          if [ ! -z "${{ github.event.schedule }}" ]; then
            if [ "${{ github.event.schedule }}" == '0 2 * * *' ]; then
              echo "::set-output name=scheduled-stable-release::true"
            fi

            if [ "${{ github.event.schedule }}" == '0 5,9 * * *' ]; then
              echo "::set-output name=scheduled-daily-release::true"
            fi
          fi

      - name: Get release tag
        id: get-release-tag
        run: |          
          releaseTag='${{ github.event.inputs.tag }}'
          if [ ! -z "$releaseTag" ]; then             
            if [ "$releaseTag" == 'stable' ]; then
              echo "::set-output name=release-tag::stable"
            elif [ "$releaseTag" == 'rc' ]; then
              echo "::set-output name=release-tag::rc"
            elif [ "$releaseTag" == 'alpha' ]; then
              echo "::set-output name=release-tag::alpha"
            else
              echo "::set-output name=release-tag::$releaseTag"
            fi
          else
            if [ "${{ github.ref_name }}" == 'main' ]; then
              if [ ${{ steps.check-if-scheduled-test.outputs.scheduled-daily-release }} ]; then
                echo "::set-output name=release-tag::alpha"
              else
                echo "::set-output name=release-tag::stable"
              fi
            elif [ "${{ github.ref_name }}" == 'dev' ]; then
              echo "::set-output name=release-tag::alpha"
            elif [ "${{ github.ref_name }}" == 'rc' ]; then
              echo "::set-output name=release-tag::rc"
            else
              echo "::set-output name=release-tag::alpha"
            fi
          fi

      - name: Print release tag
        run: |
          echo ${{ steps.get-release-tag.outputs.release-tag }}

      - name: Setup matrix combinations from file (PR && Schedule trigger)
        if: (!github.event.inputs.test-case)
        id: setup-matrix-combinations-file
        run: |
          if [ "${{ github.event_name }}" == 'push' ]; then
            JSON=$(cat ./.github/workflows/test-case-push.json)
          else
            if [ "${{ steps.get-release-tag.outputs.release-tag }}" == "stable" ]; then
              JSON=$(cat ./.github/workflows/test-case-stable.json)
            elif [ "${{ steps.get-release-tag.outputs.release-tag }}" == "rc" ]; then
              JSON=$(cat ./.github/workflows/test-case-rc.json)
            else
              JSON=$(cat ./.github/workflows/test-case-all.json)
            fi
          fi
          JSONInLine=$(echo ${JSON})
          echo "::set-output name=matrix-combinations::${JSONInLine}"

      - name: Setup matrix combinations from input (Manually trigger)
        if: github.event.inputs.test-case
        id: setup-matrix-combinations-json
        run: |
          JSON='{"node-version": ${{github.event.inputs.node-version}}, "test-case": ${{github.event.inputs.test-case}}, "os": ${{github.event.inputs.os}} }'
          echo "::set-output name=matrix-combinations::${JSON}"
    outputs:
      matrix-combinations: ${{ steps.setup-matrix-combinations-file.outputs.matrix-combinations ||  steps.setup-matrix-combinations-json.outputs.matrix-combinations}}
      release-tag: ${{steps.get-release-tag.outputs.release-tag}}      
      scheduled-stable-release: ${{steps.check-if-scheduled-test.outputs.scheduled-stable-release}}
      scheduled-daily-release: ${{steps.check-if-scheduled-test.outputs.scheduled-daily-release}}

  main:
    name: ${{ matrix.test-case }} (${{ matrix.os }}, node ${{ matrix.node-version }}) from ${{github.ref}}
    needs: setup-matrix
    timeout-minutes: 90
    outputs:
      release-version: ${{steps.download-release.outputs.release-version}}
      uitest-executed: ${{steps.set-uitest-executed.outputs.uitest-executed}}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix-combinations) }}

    runs-on: ${{ matrix.os }}

    steps:
      - name: show matrix value
        run: |
          echo ${{ matrix.test-case }}
          echo ${{ matrix.os }}
          echo "node "${{ matrix.node-version }}
          echo "from "${{github.ref}}
